{"entries":[{"timestamp":1761419962568,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":182,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":6754,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":114,"length1":111,"diffs":[[1,"        \"microphone\": \"*\"\n"]]},{"start1":231,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1761420242589,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6643,"length1":33,"diffs":[[1,"//% color=\"#00CC00\" icon=\"\\uf1f9\"\r\n"]]}]}]},{"timestamp":1761420915239,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6643,"length1":31,"diffs":[[1,"//% color=\"#00CC00\" icon=\"\\uf1\"\r\n"]]}]}]},{"timestamp":1761420915949,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6643,"length1":35,"diffs":[[1,"//% color=\"#00CC00\" icon=\"\\u\"\r\n"]]},{"start1":6747,"length1":173,"diffs":[[1,""]]}]}]},{"timestamp":1761421462175,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6641,"length1":69,"diffs":[[1,""]]},{"start1":6643,"length1":109,"diffs":[[1,""]]},{"start1":6753,"length1":103,"diffs":[[1,"    interface Switch {\r\n        controller: string\r\n        led: number\r\n"]]},{"start1":6835,"length1":204,"diffs":[[1,"    interface Track {\r\n        controller: string\r\n        led: number\r\n        \r\n"]]}]}]},{"timestamp":1761422057933,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6641,"length1":20,"diffs":[[1,"enum Service {\r\n"]]},{"start1":6712,"length1":56,"diffs":[[1,""]]},{"start1":6931,"length1":25,"diffs":[[1,"    interface Controller {\r\n"]]},{"start1":7007,"length1":31,"diffs":[[1,"        _service: Service\r\n"]]},{"start1":7043,"length1":36,"diffs":[[1,"    let CONTROLLER: Controller[] = []\r\n"]]},{"start1":7084,"length1":85,"diffs":[[1,"    export function addController(id: number, firstled: number, service: Service ) {\r\n"]]},{"start1":7254,"length1":108,"diffs":[[1,""]]}]}]},{"timestamp":1761422649416,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7037,"length1":29,"diffs":[[1,""]]},{"start1":7064,"length1":0,"diffs":[[1,"        _service: ServiceType\r\n"]]},{"start1":7142,"length1":194,"diffs":[[1,"    export function addController(id: number, firstled: number, service: Service) {\r\n        CONTROLLER.push( {_id: id, _firstled: firstled, _service: service})\r\n"]]},{"start1":7377,"length1":254,"diffs":[[1,"        \r\n"]]},{"start1":7394,"length1":0,"diffs":[[1,"    radio.sendNumber(0)\r\n"]]}]}]},{"timestamp":1761423235813,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6641,"length1":15,"diffs":[[1,"enum ServiceType {\r\n    Switch,\r\n    Pause,\r\n    Ungear,\r\n    Speed,\r\n}\r\n"]]},{"start1":6731,"length1":50,"diffs":[[1,"    Straight,\r\n    Left,\r\n    Right,\r\n"]]},{"start1":6786,"length1":47,"diffs":[[1,"    Fast,\r\n    Normal,\r\n    Slow,\r\n"]]},{"start1":6840,"length1":48,"diffs":[[1,"    Long,\r\n    Normal,\r\n    Short,\r\n"]]},{"start1":7140,"length1":324,"diffs":[[1,"    function msgBase\r\n"]]},{"start1":7343,"length1":81,"diffs":[[1,"    export function setSwitch(id: number, direction: Switch) {\r\n        for (let i = 0; i < CONTROLLER.length; i++)\r\n            if (CONTROLLER[i]._id == id) {\r\n                let msg = CONTROLLER[i]._controller * 1000 + CONTROLLER[i]._firstled * 10 + direction\r\n                radio.sendNumber(msg)\r\n            }\r\n"]]},{"start1":7668,"length1":356,"diffs":[[1,""]]}]}]},{"timestamp":1761423781529,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6859,"length1":59,"diffs":[[1,""]]},{"start1":7444,"length1":94,"diffs":[[1,""]]},{"start1":8070,"length1":112,"diffs":[[1,""]]}]}]},{"timestamp":1761424202976,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7597,"length1":92,"diffs":[[1,"    export function addController(id: number, controller: number, firstled: number) {\r\n"]]}]}]},{"timestamp":1761424860792,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7597,"length1":93,"diffs":[[1,"    export function addController(id: number, controller: number, port firstled: number) {\r\n"]]}]}]},{"timestamp":1761424860883,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7103,"length1":23,"diffs":[[1,""]]},{"start1":7344,"length1":142,"diffs":[[1,"                base = CONTROLLER[i]._controller * 1000 + CONTROLLER[i]._firstled * 10\r\n"]]},{"start1":7503,"length1":340,"diffs":[[1,""]]},{"start1":7597,"length1":197,"diffs":[[1,"    export function addController(id: number, controller: number, port: firstled: number) {\r\n        CONTROLLER.push( {_id: id, _controller: controller, _firstled: firstled})\r\n"]]},{"start1":8299,"length1":20,"diffs":[[1,""]]}]}]},{"timestamp":1761425443361,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6859,"length1":195,"diffs":[[1,"let LEDS: Ledstrip.Device\r\n"]]},{"start1":6918,"length1":783,"diffs":[[1,""]]},{"start1":7028,"length1":0,"diffs":[[1,"    interface Service {\r\n        _id: number\r\n        _controller: number\r\n        _port: number\r\n        _firstled: number\r\n    }\r\n\r\n    let CONTROLLER: Service[] = []\r\n\r\n    function msgBase(id: number): number {\r\n        let base: number\r\n        for (let i = 0; i < CONTROLLER.length; i++)\r\n            if (CONTROLLER[i]._id == id) {\r\n                base = CONTROLLER[i]._controller * 1000 +\r\n                        (CONTROLLER[i]._port * 25 + CONTROLLER[i]._firstled) * 10\r\n                return base\r\n            }\r\n        return 0\r\n    }\r\n\r\n    function msgService(msg: number) : Service {\r\n        let service: Service\r\n        service._id = 0\r\n        service._controller = Math.floor(msg / 1000)\r\n        msg = msg - service._controller * 1000\r\n        service._port = Math.floor(msg / 25)\r\n        service._firstled = msg - service._port * 25\r\n        return service\r\n    }\r\n\r\n"]]},{"start1":8005,"length1":221,"diffs":[[1,""]]},{"start1":8737,"length1":367,"diffs":[[1,"    let service = \r\n    switch (msg) {\r\n            \r\n"]]}]}]},{"timestamp":1761426040694,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6641,"length1":18,"diffs":[[1,"// ungear = 0\r\n"]]},{"start1":6859,"length1":112,"diffs":[[1,"let PORT1 = Ledstrip.create(DigitalPin.P20, 25)\r\nlet PORT2 = Ledstrip.create(DigitalPin.P0, 25)\r\nlet PORT3 = Ledstrip.create(DigitalPin.P1, 25)\r\nlet PORT4 = Ledstrip.create(DigitalPin.P2, 25)\r\n"]]},{"start1":7191,"length1":20,"diffs":[[1,""]]},{"start1":7752,"length1":177,"diffs":[[1,"    service._port = Math.floor(msg / 25)\r\n    service._firstled = msg - service._port * 25\r\n"]]},{"start1":8117,"length1":156,"diffs":[[1,"        let PORT2 = Ledstrip.create(DigitalPin.P0, 25)\r\n        let PORT3 = Ledstrip.create(DigitalPin.P1, 25)\r\n        let PORT4 = Ledstrip.create(DigitalPin.P2, 25)\r\n"]]},{"start1":8395,"length1":137,"diffs":[[1,"        CONTROLLER.push( {_id: id, _controller: controller, _port: port, _firstled: firstled})\r\n"]]},{"start1":9077,"length1":22,"diffs":[[1,""]]},{"start1":9125,"length1":350,"diffs":[[1,"        switch (service._port) {\r\n            case 0: pin = DigitalPin.P20; break;\r\n            case 1: pin = DigitalPin.P0; break;\r\n            case 2: pin = DigitalPin.P1; break;\r\n            case 3: pin = DigitalPin.P2; break;\r\n"]]},{"start1":9367,"length1":0,"diffs":[[1,"        switch.\r\n"]]}]}]},{"timestamp":1761426635882,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9108,"length1":0,"diffs":[[1,"    let pin: DigitalPin\r\n"]]},{"start1":9155,"length1":39,"diffs":[[1,""]]},{"start1":9472,"length1":265,"diffs":[[1,"            case Speed.Fast: color = Color.Green; break;\r\n            case Spee\r\n"]]},{"start1":9564,"length1":543,"diffs":[[1,""]]}]}]},{"timestamp":1761427229170,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":8300,"length1":14,"diffs":[[1,""]]},{"start1":10266,"length1":34,"diffs":[[1,""]]},{"start1":10294,"length1":984,"diffs":[[1,""]]},{"start1":10312,"length1":300,"diffs":[[1,"}"]]}]}]},{"timestamp":1761427828964,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7138,"length1":64,"diffs":[[1,""]]},{"start1":7553,"length1":62,"diffs":[[1,"    let service: Service\r\n"]]},{"start1":7600,"length1":21,"diffs":[[1,""]]},{"start1":8006,"length1":57,"diffs":[[1,"    function setController(controller: number) {\r\n"]]},{"start1":8300,"length1":160,"diffs":[[1,"        POR1\r\n"]]},{"start1":11429,"length1":27,"diffs":[[1,""]]},{"start1":11525,"length1":50,"diffs":[[1,"    Intelino.trackSwitch(1, Switch.Straight)\r\n"]]},{"start1":11599,"length1":46,"diffs":[[1,"    Intelino.trackSwitch(1, Switch.Left)\r\n"]]}]}]},{"timestamp":1761428426608,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7138,"length1":84,"diffs":[[1,"const dummy: Service = {_id: 0, _controller: 0, _port: 0, _}\r\n"]]},{"start1":7617,"length1":34,"diffs":[[1,"basic.showNumber(msg)\r\n    let service: Service = {_id: 0, }\r\n"]]},{"start1":7700,"length1":0,"diffs":[[1,"basic.showNumber(0)\r\n"]]},{"start1":10288,"length1":73,"diffs":[[1,"            case 0: for (let i = 0; i < leds; i++)\r\n"]]},{"start1":10616,"length1":74,"diffs":[[1,"            case 1: for (let i = 0; i < leds; i++)\r\n"]]},{"start1":10944,"length1":73,"diffs":[[1,"            case 2: for (let i = 0; i < leds; i++)\r\n"]]},{"start1":11272,"length1":73,"diffs":[[1,"            case 3: for (let i = 0; i < leds; i++)\r\n"]]}]}]},{"timestamp":1761429012828,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":9369,"length1":37,"diffs":[[1,""]]},{"start1":11788,"length1":37,"diffs":[[1,"Intelino.addController(1, 1, 2, 0)\r\n"]]},{"start1":11860,"length1":30,"diffs":[[1,""]]},{"start1":11862,"length1":55,"diffs":[[1,""]]},{"start1":11962,"length1":47,"diffs":[[1,"    messageHandler(msgBase(1) + Switch.Left)\r\n"]]}]}]},{"timestamp":1761429516861,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2207,"length1":49,"diffs":[[1,"            if (pixel < 0 || pixel >= 8)\r\n"]]},{"start1":2593,"length1":48,"diffs":[[1,"            for (let i = 0; i < 8; ++i)\r\n"]]},{"start1":8100,"length1":0,"diffs":[[1,"    export function setController(controller: number) {\r\n        CONTROLLERID = controller\r\n        PORT1 = Ledstrip.create(DigitalPin.P20, 25)\r\n        PORT2 = Ledstrip.create(DigitalPin.P0, 25)\r\n        PORT3 = Ledstrip.create(DigitalPin.P1, 25)\r\n        PORT4 = Ledstrip.create(DigitalPin.P2, 25)\r\n        PORT1.setClear(); PORT1.show()\r\n        PORT2.setClear(); PORT1.show()\r\n        PORT3.setClear(); PORT1.show()\r\n        PORT4.setClear(); PORT1.show()\r\n    }\r\n\r\n"]]},{"start1":9266,"length1":482,"diffs":[[1,""]]},{"start1":9369,"length1":0,"diffs":[[1,"basic.showNumber(service._firstled)\r\n"]]},{"start1":11716,"length1":0,"diffs":[[1,"\r\n/////////////////////////////////////\r\n/////////////////////////////////////\r\n\r\nIntelino.setController(1)\r\nIntelino.addController(1, 1, 2, 10)\r\nIntelino.addController(2, 1, 3, 0)\r\n// id, controller, port, led\r\n\r\nPORT2.setPixelColor(5, Color.Magenta)\r\nPORT2.show()\r\n\r\nrunHandler = () => {\r\n    messageHandler(msgBase(1) + Switch.Straight)\r\n}\r\n\r\nstopHandler = () => {\r\n    messageHandler(msgBase(1) + Switch.Right)\r\n}\r\n"]]}]}]},{"timestamp":1761430108164,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6655,"length1":80,"diffs":[[1,""]]},{"start1":8114,"length1":271,"diffs":[[1,""]]},{"start1":8276,"length1":84,"diffs":[[1,"                            _port: port, _firstled: firstled, _state: -1})\r\n"]]},{"start1":8361,"length1":18,"diffs":[[1,""]]},{"start1":8830,"length1":54,"diffs":[[1,"// A CONTROLLER MUST CALL setController\r\n"]]},{"start1":10287,"length1":21,"diffs":[[1,"            case 1:\r\n"]]},{"start1":10636,"length1":22,"diffs":[[1,"            case 2: \r\n"]]},{"start1":10986,"length1":21,"diffs":[[1,"            case 3:\r\n"]]},{"start1":11335,"length1":21,"diffs":[[1,"            case 4:\r\n"]]}]}]},{"timestamp":1761430707567,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6735,"length1":20,"diffs":[[1,"const Ungear = 0\r\n"]]},{"start1":8299,"length1":111,"diffs":[[1,"    //% block=\"wijs onderdeel %id toe aan: controller %controller, poort %port, led positie %firstled\"\r\n"]]},{"start1":8720,"length1":174,"diffs":[[1,"    //% block=\"\"\r\n    export function ungear(id: number) {\r\n"]]},{"start1":9929,"length1":57,"diffs":[[1,"            case Ungear: color = Color.Yellow; break;\r\n"]]}]}]},{"timestamp":1761431022391,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6825,"length1":2,"diffs":[[1,""]]}]}]},{"timestamp":1761470308884,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6827,"length1":7,"diffs":[[1,""]]}]}]},{"timestamp":1761470326835,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6735,"length1":0,"diffs":[[1,"const Uncouple = 0\r\n\r\n"]]},{"start1":6772,"length1":50,"diffs":[[1,"    Straight = 1,\r\n    Left = 2,\r\n    Right = 3,\r\n"]]},{"start1":6827,"length1":47,"diffs":[[1,"enum \r\n"]]},{"start1":6848,"length1":47,"diffs":[[1,"    Fast = 4,\r\n    Normal = 5,\r\n    Slow = 6,\r\n"]]},{"start1":6914,"length1":49,"diffs":[[1,"    Long = 7,\r\n    Normal = 8,\r\n    Short = 9,\r\n"]]},{"start1":7363,"length1":222,"diffs":[[1,""]]},{"start1":7514,"length1":131,"diffs":[[1,"            base = CONTROLLER[i]._controller * 1000 +\r\n                (CONTROLLER[i]._port * 25 + CONTROLLER[i]._firstled) * 10\r\n"]]}]}]},{"timestamp":1761470926458,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7382,"length1":180,"diffs":[[1,"// port1 0\r\n// port2 100\r\n// port3 200\r\n// PORT4 300\r\n// PORT5 400\r\n"]]},{"start1":7452,"length1":0,"diffs":[[1,"// 11 states per led (9 reserved)   x20\r\n// 20 leds per port                 x20 >> 0, 20, 40, 60, 80\r\n// 5 ports per hub                  x5  >> \r\n\r\n\r\n"]]},{"start1":7755,"length1":131,"diffs":[[1,"            base = CONTROLLER[i]._controller * 2000 +\r\n                (CONTROLLER[i]._port * 100 + CONTROLLER[i]._firstled) * 20\r\n"]]},{"start1":8135,"length1":177,"diffs":[[1,"    service._port = Math.floor(msg / 250)\r\n    msg = msg - service._port * 250\r\n    service._firstled = Math.floor(msg / 10)\r\n    service._state = msg - service._firstled * 10\r\n"]]}]}]},{"timestamp":1761471520277,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":7382,"length1":73,"diffs":[[1,"// states:      11 (+4 reserved)\r\n"]]},{"start1":8940,"length1":218,"diffs":[[1,"    //% block=\"uncoupling at number %id is %state \"\r\n    //% block.loc.nl=\"ontkoppeling bij onderdeel %id is %state\"\r\n    export function ungear(id: number, state: State) {\r\n        radio.sendNumber(msgBase(id))\r\n"]]},{"start1":9162,"length1":158,"diffs":[[1,"    export function trackSwitch(id: number, direction: Switch) {\r\n        radio.sendNumber(msgBase(id) + direction)\r\n    }\r\n\r\n    export function trackSpeed(id: number, speed: Speed) {\r\n"]]},{"start1":9404,"length1":93,"diffs":[[1,""]]},{"start1":9516,"length1":225,"diffs":[[1,""]]},{"start1":10263,"length1":0,"diffs":[[1,"            case Uncouple: color = Color.Yellow; break;\r\n"]]},{"start1":10499,"length1":120,"diffs":[[1,""]]}]}]},{"timestamp":1761472118398,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":6675,"length1":93,"diffs":[[1,"// A CONTROLLER MUST AND MAY ONLY CALL setController(id)\r\n"]]},{"start1":6986,"length1":397,"diffs":[[1,""]]},{"start1":7559,"length1":59,"diffs":[[1,"// hub bases:   0, 1000, 2000, 3000, ...\r\n"]]},{"start1":8446,"length1":343,"diffs":[[1,"    //% block=\"attach device number %id to: controller %controller, port %port, led position %firstled\"\r\n    //% block.loc.nl=\"wijs onderdeel %id toe aan: controller %controller, poort %port, led positie %firstled\"\r\n    //% port.min=1 port.max=4 firstled.min=1 firstled.max=25\r\n    export function addController(id: number, controller: number, port: number, firstled: number) {\r\n"]]},{"start1":8886,"length1":76,"diffs":[[1,"                            _port: port - 1, _firstled: firstled - 1, _state: -1})\r\n"]]},{"start1":8979,"length1":109,"diffs":[[1,"    //% block=\"uncoupling at IC %id is %state \"\r\n    //% block.loc.nl=\"ontkoppeling bij IC %id is %state\"\r\n"]]},{"start1":9206,"length1":100,"diffs":[[1,"    //% block=\"speed at IC %id is %speed \"\r\n    //% block.loc.nl=\"snelheid bij IC %id is %speed\"\r\n"]]},{"start1":9420,"length1":95,"diffs":[[1,"    //% block=\"stop at IC %id is %speed \"\r\n    //% block.loc.nl=\"stop bij IC %id is %speed\"\r\n"]]},{"start1":9931,"length1":50,"diffs":[[1,"function setController(controller: number) {\r\n"]]}]}]},{"timestamp":1761472700954,"editorVersion":"8.0.17","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":7532,"length1":34,"diffs":[[1,"let CONTROLLERID: number = 0\r\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":316,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1761419962567,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"intelino\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1761421763446,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"///////////////////////\r\n//###################//\r\n//##               ##//\r\n//##  ledstrip.ts  ##//\r\n//##               ##//\r\n//###################//\r\n///////////////////////\r\n\r\nenum NeopixelMode {\r\n    GRB = 1,\r\n    RGBW = 2,\r\n    RGB = 3\r\n}\r\n\r\nnamespace Ledstrip {\r\n\r\n    export class Device {\r\n\r\n        pin: DigitalPin\r\n        max: number\r\n        mode: NeopixelMode\r\n        buffer: Buffer\r\n        size: number\r\n        bright: number = 10\r\n\r\n        constructor(pin: DigitalPin, leds: number, mode: NeopixelMode) {\r\n            this.pin = pin\r\n            this.max = leds - 1\r\n            this.mode = mode\r\n            this.size = leds * (mode == NeopixelMode.RGBW ? 4 : 3)\r\n            this.buffer = pins.createBuffer(this.size)\r\n        }\r\n\r\n        show() {\r\n            light.sendWS2812Buffer(this.buffer, this.pin)\r\n        }\r\n\r\n        setPixelRGB(offset: number, red: number, green: number, blue: number, white: number = 0): void {\r\n            offset *= (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            switch (this.mode) {\r\n                case NeopixelMode.GRB:\r\n                    this.buffer[offset + 0] = Math.floor(green * this.bright / 100)\r\n                    this.buffer[offset + 1] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGB:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGBW:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    this.buffer[offset + 3] = Math.floor(white * this.bright / 100);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        setPixelColor(pixel: number, color: Color, white: number = 0): void {\r\n            if (pixel < 0 || pixel >= 8)\r\n                return;\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setPixelRGB(pixel, red, green, blue, white)\r\n        }\r\n\r\n        setRGB(red: number, green: number, blue: number, white: number = 0) {\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setColor(color: Color, white: number = 0) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setClear(): void {\r\n            this.buffer.fill(0, 0, this.size);\r\n        }\r\n\r\n        setBrightness(brightness: number) {\r\n            if (brightness < 0) brightness = 0\r\n            if (brightness > 100) brightness = 100\r\n            // small steps at low brightness and big steps at high brightness\r\n            brightness = (brightness ^ 2 / 100)\r\n            this.bright = brightness\r\n        }\r\n\r\n        setRotate(rotation: Rotate): void {\r\n            let offset = (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            if (rotation == Rotate.Clockwise)\r\n                this.buffer.rotate(-offset, 0, this.size)\r\n            else\r\n                this.buffer.rotate(offset, 0, this.size)\r\n        }\r\n\r\n        rainbow(rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            if (rotation == Rotate.Clockwise) {\r\n                this.setPixelColor(0, Color.Red)\r\n                this.setPixelColor(1, Color.Orange)\r\n                this.setPixelColor(2, Color.Yellow)\r\n                this.setPixelColor(3, Color.Green)\r\n                this.setPixelColor(4, Color.Blue)\r\n                this.setPixelColor(5, Color.Indigo)\r\n                this.setPixelColor(6, Color.Violet)\r\n                this.setPixelColor(7, Color.Purple)\r\n            }\r\n            else {\r\n                this.setPixelColor(7, Color.Red)\r\n                this.setPixelColor(6, Color.Orange)\r\n                this.setPixelColor(5, Color.Yellow)\r\n                this.setPixelColor(4, Color.Green)\r\n                this.setPixelColor(3, Color.Blue)\r\n                this.setPixelColor(2, Color.Indigo)\r\n                this.setPixelColor(1, Color.Violet)\r\n                this.setPixelColor(0, Color.Purple)\r\n            }\r\n            this.show()\r\n            basic.pause(pace)\r\n            pace = (pace + 1) * 75\r\n            for (let i = 0; i < this.max; i++) {\r\n                this.setRotate(rotation)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n        }\r\n\r\n        snake(color: Color, rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setClear();\r\n            this.show()\r\n            pace = (pace + 1) * 75\r\n            for (let i = this.max; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, red, green, blue)\r\n                else\r\n                    this.setPixelRGB(i, red, green, blue)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            this.show()\r\n            for (let i = this.max - 1; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, 0, 0, 0)\r\n                else\r\n                    this.setPixelRGB(i, 0, 0, 0)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            if (rotation == Rotate.Clockwise)\r\n                this.setPixelRGB(0, 0, 0, 0)\r\n            else\r\n                this.setPixelRGB(this.max, 0, 0, 0)\r\n            this.show()\r\n            basic.pause(pace)\r\n        }\r\n    }\r\n\r\n    export function create(pin: DigitalPin, leds: number, mode: NeopixelMode = NeopixelMode.GRB): Device {\r\n        let device = new Device(pin, leds, mode)\r\n        return device\r\n    }\r\n}\r\n\r\n\r\n/////////////////////\r\n//#################//\r\n//##             ##//\r\n//## intelino.ts ##//\r\n//##             ##//\r\n//#################//\r\n/////////////////////\r\n\r\nenum Service {\r\n    Switch,\r\n    Pause,\r\n    Ungear,\r\n    Speed,\r\n}\r\n\r\nenum Speed {\r\n    Fast,\r\n    Normal,\r\n    Slow,\r\n}\r\n\r\nenum Pause {\r\n    Long,\r\n    Normal,\r\n    Short,\r\n}\r\n\r\n//% color=\"#FFC90E\" icon=\"\\uf207\"\r\n//% block=\"Intelino\"\r\n//% block.loc.nl=\"Intelino\"\r\nnamespace Intelino {\r\n\r\n    interface Controller {\r\n        controller: string\r\n        led: number\r\n    }\r\n\r\n    interface Track {\r\n        controller: string\r\n        led: number\r\n    }\r\n}\r\n","README.md":"","pxt.json":"{\n    \"name\": \"intelino\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"general\": \"github:etmbit/general#4ea1e3f3224a0692900d0a9e2898a515af73c9a0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761423629243,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"///////////////////////\r\n//###################//\r\n//##               ##//\r\n//##  ledstrip.ts  ##//\r\n//##               ##//\r\n//###################//\r\n///////////////////////\r\n\r\nenum NeopixelMode {\r\n    GRB = 1,\r\n    RGBW = 2,\r\n    RGB = 3\r\n}\r\n\r\nnamespace Ledstrip {\r\n\r\n    export class Device {\r\n\r\n        pin: DigitalPin\r\n        max: number\r\n        mode: NeopixelMode\r\n        buffer: Buffer\r\n        size: number\r\n        bright: number = 10\r\n\r\n        constructor(pin: DigitalPin, leds: number, mode: NeopixelMode) {\r\n            this.pin = pin\r\n            this.max = leds - 1\r\n            this.mode = mode\r\n            this.size = leds * (mode == NeopixelMode.RGBW ? 4 : 3)\r\n            this.buffer = pins.createBuffer(this.size)\r\n        }\r\n\r\n        show() {\r\n            light.sendWS2812Buffer(this.buffer, this.pin)\r\n        }\r\n\r\n        setPixelRGB(offset: number, red: number, green: number, blue: number, white: number = 0): void {\r\n            offset *= (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            switch (this.mode) {\r\n                case NeopixelMode.GRB:\r\n                    this.buffer[offset + 0] = Math.floor(green * this.bright / 100)\r\n                    this.buffer[offset + 1] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGB:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGBW:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    this.buffer[offset + 3] = Math.floor(white * this.bright / 100);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        setPixelColor(pixel: number, color: Color, white: number = 0): void {\r\n            if (pixel < 0 || pixel >= 8)\r\n                return;\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setPixelRGB(pixel, red, green, blue, white)\r\n        }\r\n\r\n        setRGB(red: number, green: number, blue: number, white: number = 0) {\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setColor(color: Color, white: number = 0) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setClear(): void {\r\n            this.buffer.fill(0, 0, this.size);\r\n        }\r\n\r\n        setBrightness(brightness: number) {\r\n            if (brightness < 0) brightness = 0\r\n            if (brightness > 100) brightness = 100\r\n            // small steps at low brightness and big steps at high brightness\r\n            brightness = (brightness ^ 2 / 100)\r\n            this.bright = brightness\r\n        }\r\n\r\n        setRotate(rotation: Rotate): void {\r\n            let offset = (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            if (rotation == Rotate.Clockwise)\r\n                this.buffer.rotate(-offset, 0, this.size)\r\n            else\r\n                this.buffer.rotate(offset, 0, this.size)\r\n        }\r\n\r\n        rainbow(rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            if (rotation == Rotate.Clockwise) {\r\n                this.setPixelColor(0, Color.Red)\r\n                this.setPixelColor(1, Color.Orange)\r\n                this.setPixelColor(2, Color.Yellow)\r\n                this.setPixelColor(3, Color.Green)\r\n                this.setPixelColor(4, Color.Blue)\r\n                this.setPixelColor(5, Color.Indigo)\r\n                this.setPixelColor(6, Color.Violet)\r\n                this.setPixelColor(7, Color.Purple)\r\n            }\r\n            else {\r\n                this.setPixelColor(7, Color.Red)\r\n                this.setPixelColor(6, Color.Orange)\r\n                this.setPixelColor(5, Color.Yellow)\r\n                this.setPixelColor(4, Color.Green)\r\n                this.setPixelColor(3, Color.Blue)\r\n                this.setPixelColor(2, Color.Indigo)\r\n                this.setPixelColor(1, Color.Violet)\r\n                this.setPixelColor(0, Color.Purple)\r\n            }\r\n            this.show()\r\n            basic.pause(pace)\r\n            pace = (pace + 1) * 75\r\n            for (let i = 0; i < this.max; i++) {\r\n                this.setRotate(rotation)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n        }\r\n\r\n        snake(color: Color, rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setClear();\r\n            this.show()\r\n            pace = (pace + 1) * 75\r\n            for (let i = this.max; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, red, green, blue)\r\n                else\r\n                    this.setPixelRGB(i, red, green, blue)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            this.show()\r\n            for (let i = this.max - 1; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, 0, 0, 0)\r\n                else\r\n                    this.setPixelRGB(i, 0, 0, 0)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            if (rotation == Rotate.Clockwise)\r\n                this.setPixelRGB(0, 0, 0, 0)\r\n            else\r\n                this.setPixelRGB(this.max, 0, 0, 0)\r\n            this.show()\r\n            basic.pause(pace)\r\n        }\r\n    }\r\n\r\n    export function create(pin: DigitalPin, leds: number, mode: NeopixelMode = NeopixelMode.GRB): Device {\r\n        let device = new Device(pin, leds, mode)\r\n        return device\r\n    }\r\n}\r\n\r\n\r\n/////////////////////\r\n//#################//\r\n//##             ##//\r\n//## intelino.ts ##//\r\n//##             ##//\r\n//#################//\r\n/////////////////////\r\n\r\nenum Switch {\r\n    Straight,\r\n    Left,\r\n    Right,\r\n}\r\nenum Speed {\r\n    Fast,\r\n    Normal,\r\n    Slow,\r\n}\r\n\r\nenum Pause {\r\n    Long,\r\n    Normal,\r\n    Short,\r\n}\r\n\r\n//% color=\"#FFC90E\" icon=\"\\uf207\"\r\n//% block=\"Intelino\"\r\n//% block.loc.nl=\"Intelino\"\r\nnamespace Intelino {\r\n\r\n    interface Service {\r\n        _id: number\r\n        _controller: number\r\n        _firstled: number\r\n    }\r\n\r\n    let CONTROLLER: Service[] = []\r\n\r\n    function msgBase(id: number): number {\r\n        let base: number\r\n        for (let i = 0; i < CONTROLLER.length; i++)\r\n            if (CONTROLLER[i]._id == id) {\r\n                base = CONTROLLER[i]._controller * 1000 + CONTROLLER[i]._firstled * 10\r\n                return base\r\n            }\r\n        return 0\r\n    }\r\n\r\n    export function addController(id: number, controller: number, firstled: number) {\r\n        CONTROLLER.push( {_id: id, _controller: controller, _firstled: firstled})\r\n    }\r\n\r\n    export function trackSwitch(id: number, direction: Switch) {\r\n        radio.sendNumber(msgBase(id) + direction)\r\n    }\r\n\r\n    export function trackPause(id: number, time: Pause) {\r\n        radio.sendNumber(msgBase(id) + time)\r\n    }\r\n\r\n    export function trackSpeed(id: number, speed: Speed) {\r\n        radio.sendNumber(msgBase(id) + speed)\r\n    }\r\n}\r\n","README.md":"","pxt.json":"{\n    \"name\": \"intelino\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"general\": \"github:etmbit/general#4ea1e3f3224a0692900d0a9e2898a515af73c9a0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761425433131,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"///////////////////////\r\n//###################//\r\n//##               ##//\r\n//##  ledstrip.ts  ##//\r\n//##               ##//\r\n//###################//\r\n///////////////////////\r\n\r\nenum NeopixelMode {\r\n    GRB = 1,\r\n    RGBW = 2,\r\n    RGB = 3\r\n}\r\n\r\nnamespace Ledstrip {\r\n\r\n    export class Device {\r\n\r\n        pin: DigitalPin\r\n        max: number\r\n        mode: NeopixelMode\r\n        buffer: Buffer\r\n        size: number\r\n        bright: number = 10\r\n\r\n        constructor(pin: DigitalPin, leds: number, mode: NeopixelMode) {\r\n            this.pin = pin\r\n            this.max = leds - 1\r\n            this.mode = mode\r\n            this.size = leds * (mode == NeopixelMode.RGBW ? 4 : 3)\r\n            this.buffer = pins.createBuffer(this.size)\r\n        }\r\n\r\n        show() {\r\n            light.sendWS2812Buffer(this.buffer, this.pin)\r\n        }\r\n\r\n        setPixelRGB(offset: number, red: number, green: number, blue: number, white: number = 0): void {\r\n            offset *= (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            switch (this.mode) {\r\n                case NeopixelMode.GRB:\r\n                    this.buffer[offset + 0] = Math.floor(green * this.bright / 100)\r\n                    this.buffer[offset + 1] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGB:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGBW:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    this.buffer[offset + 3] = Math.floor(white * this.bright / 100);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        setPixelColor(pixel: number, color: Color, white: number = 0): void {\r\n            if (pixel < 0 || pixel >= 8)\r\n                return;\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setPixelRGB(pixel, red, green, blue, white)\r\n        }\r\n\r\n        setRGB(red: number, green: number, blue: number, white: number = 0) {\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setColor(color: Color, white: number = 0) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setClear(): void {\r\n            this.buffer.fill(0, 0, this.size);\r\n        }\r\n\r\n        setBrightness(brightness: number) {\r\n            if (brightness < 0) brightness = 0\r\n            if (brightness > 100) brightness = 100\r\n            // small steps at low brightness and big steps at high brightness\r\n            brightness = (brightness ^ 2 / 100)\r\n            this.bright = brightness\r\n        }\r\n\r\n        setRotate(rotation: Rotate): void {\r\n            let offset = (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            if (rotation == Rotate.Clockwise)\r\n                this.buffer.rotate(-offset, 0, this.size)\r\n            else\r\n                this.buffer.rotate(offset, 0, this.size)\r\n        }\r\n\r\n        rainbow(rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            if (rotation == Rotate.Clockwise) {\r\n                this.setPixelColor(0, Color.Red)\r\n                this.setPixelColor(1, Color.Orange)\r\n                this.setPixelColor(2, Color.Yellow)\r\n                this.setPixelColor(3, Color.Green)\r\n                this.setPixelColor(4, Color.Blue)\r\n                this.setPixelColor(5, Color.Indigo)\r\n                this.setPixelColor(6, Color.Violet)\r\n                this.setPixelColor(7, Color.Purple)\r\n            }\r\n            else {\r\n                this.setPixelColor(7, Color.Red)\r\n                this.setPixelColor(6, Color.Orange)\r\n                this.setPixelColor(5, Color.Yellow)\r\n                this.setPixelColor(4, Color.Green)\r\n                this.setPixelColor(3, Color.Blue)\r\n                this.setPixelColor(2, Color.Indigo)\r\n                this.setPixelColor(1, Color.Violet)\r\n                this.setPixelColor(0, Color.Purple)\r\n            }\r\n            this.show()\r\n            basic.pause(pace)\r\n            pace = (pace + 1) * 75\r\n            for (let i = 0; i < this.max; i++) {\r\n                this.setRotate(rotation)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n        }\r\n\r\n        snake(color: Color, rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setClear();\r\n            this.show()\r\n            pace = (pace + 1) * 75\r\n            for (let i = this.max; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, red, green, blue)\r\n                else\r\n                    this.setPixelRGB(i, red, green, blue)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            this.show()\r\n            for (let i = this.max - 1; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, 0, 0, 0)\r\n                else\r\n                    this.setPixelRGB(i, 0, 0, 0)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            if (rotation == Rotate.Clockwise)\r\n                this.setPixelRGB(0, 0, 0, 0)\r\n            else\r\n                this.setPixelRGB(this.max, 0, 0, 0)\r\n            this.show()\r\n            basic.pause(pace)\r\n        }\r\n    }\r\n\r\n    export function create(pin: DigitalPin, leds: number, mode: NeopixelMode = NeopixelMode.GRB): Device {\r\n        let device = new Device(pin, leds, mode)\r\n        return device\r\n    }\r\n}\r\n\r\n\r\n/////////////////////\r\n//#################//\r\n//##             ##//\r\n//## intelino.ts ##//\r\n//##             ##//\r\n//#################//\r\n/////////////////////\r\n\r\n// ungear = 0\r\n\r\nenum Switch {\r\n    Straight = 1,\r\n    Left = 2,\r\n    Right = 3,\r\n}\r\nenum Speed {\r\n    Fast = 4,\r\n    Normal = 5,\r\n    Slow = 6,\r\n}\r\n\r\nenum Pause {\r\n    Long = 7,\r\n    Normal = 8,\r\n    Short = 9,\r\n}\r\n\r\nlet LEDS: Ledstrip.Device\r\nlet CONTROLLERID: number = 0\r\n\r\n//% color=\"#FFC90E\" icon=\"\\uf207\"\r\n//% block=\"Intelino\"\r\n//% block.loc.nl=\"Intelino\"\r\nnamespace Intelino {\r\n\r\n    interface Service {\r\n        _id: number\r\n        _controller: number\r\n        _port: number\r\n        _firstled: number\r\n    }\r\n\r\n    let CONTROLLER: Service[] = []\r\n\r\n    function msgBase(id: number): number {\r\n        let base: number\r\n        for (let i = 0; i < CONTROLLER.length; i++)\r\n            if (CONTROLLER[i]._id == id) {\r\n                base = CONTROLLER[i]._controller * 1000 +\r\n                        (CONTROLLER[i]._port * 25 + CONTROLLER[i]._firstled) * 10\r\n                return base\r\n            }\r\n        return 0\r\n    }\r\n\r\n    function msgService(msg: number) : Service {\r\n        let service: Service\r\n        service._id = 0\r\n        service._controller = Math.floor(msg / 1000)\r\n        msg = msg - service._controller * 1000\r\n        service._port = Math.floor(msg / 25)\r\n        service._firstled = msg - service._port * 25\r\n        return service\r\n    }\r\n\r\n    function setController(controller: number) {\r\n        CONTROLLERID = controller\r\n    }\r\n\r\n    export function addController(id: number, controller: number, port: number, firstled: number) {\r\n        CONTROLLER.push( {_id: id, _controller: controller, _port: port, _firstled: firstled})\r\n    }\r\n\r\n    export function ungear(id: number) {\r\n        radio.sendNumber(msgBase(id))\r\n    }\r\n\r\n    export function trackSwitch(id: number, direction: Switch) {\r\n        radio.sendNumber(msgBase(id) + direction)\r\n    }\r\n\r\n    export function trackSpeed(id: number, speed: Speed) {\r\n        radio.sendNumber(msgBase(id) + speed)\r\n    }\r\n\r\n    export function trackPause(id: number, time: Pause) {\r\n        radio.sendNumber(msgBase(id) + time)\r\n    }\r\n}\r\n\r\nmessageHandler = (msg: number) => {\r\n    if (!CONTROLLERID) return\r\n    \r\n    switch (msg) {\r\n            \r\n    }\r\n}","README.md":"","pxt.json":"{\n    \"name\": \"intelino\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"general\": \"github:etmbit/general#4ea1e3f3224a0692900d0a9e2898a515af73c9a0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761427248625,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"///////////////////////\r\n//###################//\r\n//##               ##//\r\n//##  ledstrip.ts  ##//\r\n//##               ##//\r\n//###################//\r\n///////////////////////\r\n\r\nenum NeopixelMode {\r\n    GRB = 1,\r\n    RGBW = 2,\r\n    RGB = 3\r\n}\r\n\r\nnamespace Ledstrip {\r\n\r\n    export class Device {\r\n\r\n        pin: DigitalPin\r\n        max: number\r\n        mode: NeopixelMode\r\n        buffer: Buffer\r\n        size: number\r\n        bright: number = 10\r\n\r\n        constructor(pin: DigitalPin, leds: number, mode: NeopixelMode) {\r\n            this.pin = pin\r\n            this.max = leds - 1\r\n            this.mode = mode\r\n            this.size = leds * (mode == NeopixelMode.RGBW ? 4 : 3)\r\n            this.buffer = pins.createBuffer(this.size)\r\n        }\r\n\r\n        show() {\r\n            light.sendWS2812Buffer(this.buffer, this.pin)\r\n        }\r\n\r\n        setPixelRGB(offset: number, red: number, green: number, blue: number, white: number = 0): void {\r\n            offset *= (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            switch (this.mode) {\r\n                case NeopixelMode.GRB:\r\n                    this.buffer[offset + 0] = Math.floor(green * this.bright / 100)\r\n                    this.buffer[offset + 1] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGB:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGBW:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    this.buffer[offset + 3] = Math.floor(white * this.bright / 100);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        setPixelColor(pixel: number, color: Color, white: number = 0): void {\r\n            if (pixel < 0 || pixel >= 8)\r\n                return;\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setPixelRGB(pixel, red, green, blue, white)\r\n        }\r\n\r\n        setRGB(red: number, green: number, blue: number, white: number = 0) {\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setColor(color: Color, white: number = 0) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setClear(): void {\r\n            this.buffer.fill(0, 0, this.size);\r\n        }\r\n\r\n        setBrightness(brightness: number) {\r\n            if (brightness < 0) brightness = 0\r\n            if (brightness > 100) brightness = 100\r\n            // small steps at low brightness and big steps at high brightness\r\n            brightness = (brightness ^ 2 / 100)\r\n            this.bright = brightness\r\n        }\r\n\r\n        setRotate(rotation: Rotate): void {\r\n            let offset = (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            if (rotation == Rotate.Clockwise)\r\n                this.buffer.rotate(-offset, 0, this.size)\r\n            else\r\n                this.buffer.rotate(offset, 0, this.size)\r\n        }\r\n\r\n        rainbow(rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            if (rotation == Rotate.Clockwise) {\r\n                this.setPixelColor(0, Color.Red)\r\n                this.setPixelColor(1, Color.Orange)\r\n                this.setPixelColor(2, Color.Yellow)\r\n                this.setPixelColor(3, Color.Green)\r\n                this.setPixelColor(4, Color.Blue)\r\n                this.setPixelColor(5, Color.Indigo)\r\n                this.setPixelColor(6, Color.Violet)\r\n                this.setPixelColor(7, Color.Purple)\r\n            }\r\n            else {\r\n                this.setPixelColor(7, Color.Red)\r\n                this.setPixelColor(6, Color.Orange)\r\n                this.setPixelColor(5, Color.Yellow)\r\n                this.setPixelColor(4, Color.Green)\r\n                this.setPixelColor(3, Color.Blue)\r\n                this.setPixelColor(2, Color.Indigo)\r\n                this.setPixelColor(1, Color.Violet)\r\n                this.setPixelColor(0, Color.Purple)\r\n            }\r\n            this.show()\r\n            basic.pause(pace)\r\n            pace = (pace + 1) * 75\r\n            for (let i = 0; i < this.max; i++) {\r\n                this.setRotate(rotation)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n        }\r\n\r\n        snake(color: Color, rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setClear();\r\n            this.show()\r\n            pace = (pace + 1) * 75\r\n            for (let i = this.max; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, red, green, blue)\r\n                else\r\n                    this.setPixelRGB(i, red, green, blue)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            this.show()\r\n            for (let i = this.max - 1; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, 0, 0, 0)\r\n                else\r\n                    this.setPixelRGB(i, 0, 0, 0)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            if (rotation == Rotate.Clockwise)\r\n                this.setPixelRGB(0, 0, 0, 0)\r\n            else\r\n                this.setPixelRGB(this.max, 0, 0, 0)\r\n            this.show()\r\n            basic.pause(pace)\r\n        }\r\n    }\r\n\r\n    export function create(pin: DigitalPin, leds: number, mode: NeopixelMode = NeopixelMode.GRB): Device {\r\n        let device = new Device(pin, leds, mode)\r\n        return device\r\n    }\r\n}\r\n\r\n\r\n/////////////////////\r\n//#################//\r\n//##             ##//\r\n//## intelino.ts ##//\r\n//##             ##//\r\n//#################//\r\n/////////////////////\r\n\r\nconst Ungear = 0\r\n\r\nenum Switch {\r\n    Straight = 1,\r\n    Left = 2,\r\n    Right = 3,\r\n}\r\nenum Speed {\r\n    Fast = 4,\r\n    Normal = 5,\r\n    Slow = 6,\r\n}\r\n\r\nenum Pause {\r\n    Long = 7,\r\n    Normal = 8,\r\n    Short = 9,\r\n}\r\n\r\nlet PORT1: Ledstrip.Device\r\nlet PORT2: Ledstrip.Device\r\nlet PORT3: Ledstrip.Device\r\nlet PORT4: Ledstrip.Device\r\n\r\nlet CONTROLLERID: number = 0\r\n\r\ninterface Service {\r\n    _id: number\r\n    _controller: number\r\n    _port: number\r\n    _firstled: number\r\n    _state: number\r\n}\r\n\r\nlet CONTROLLER: Service[] = []\r\n\r\nfunction msgBase(id: number): number {\r\n    let base: number\r\n    for (let i = 0; i < CONTROLLER.length; i++)\r\n        if (CONTROLLER[i]._id == id) {\r\n            base = CONTROLLER[i]._controller * 1000 +\r\n                (CONTROLLER[i]._port * 25 + CONTROLLER[i]._firstled) * 10\r\n            return base\r\n        }\r\n    return 0\r\n}\r\n\r\nfunction msgService(msg: number): Service {\r\n    let service: Service\r\n    service._id = 0\r\n    service._controller = Math.floor(msg / 1000)\r\n    msg = msg - service._controller * 1000\r\n    service._port = Math.floor(msg / 250)\r\n    msg = msg - service._port * 250\r\n    service._firstled = Math.floor(msg / 10)\r\n    service._state = msg - service._firstled * 10\r\n    return service\r\n}\r\n\r\n//% color=\"#FFC90E\" icon=\"\\uf207\"\r\n//% block=\"Intelino\"\r\n//% block.loc.nl=\"Intelino\"\r\nnamespace Intelino {\r\n\r\n    function setController(controller: number) {\r\n        CONTROLLERID = controller\r\n        PORT1 = Ledstrip.create(DigitalPin.P20, 25)\r\n        PORT2 = Ledstrip.create(DigitalPin.P0, 25)\r\n        PORT3 = Ledstrip.create(DigitalPin.P1, 25)\r\n        PORT4 = Ledstrip.create(DigitalPin.P2, 25)\r\n    }\r\n\r\n    export function addController(id: number, controller: number, port: number, firstled: number) {\r\n        CONTROLLER.push( {_id: id, _controller: controller,\r\n                            _port: port, _firstled: firstled, _state: -1})\r\n    }\r\n\r\n    export function ungear(id: number) {\r\n        radio.sendNumber(msgBase(id))\r\n    }\r\n\r\n    export function trackSwitch(id: number, direction: Switch) {\r\n        radio.sendNumber(msgBase(id) + direction)\r\n    }\r\n\r\n    export function trackSpeed(id: number, speed: Speed) {\r\n        radio.sendNumber(msgBase(id) + speed)\r\n    }\r\n\r\n    export function trackPause(id: number, time: Pause) {\r\n        radio.sendNumber(msgBase(id) + time)\r\n    }\r\n}\r\n\r\nmessageHandler = (msg: number) => {\r\n    if (!CONTROLLERID) return\r\n    let service = msgService(msg)\r\n    let color: Color\r\n    let leds = 1\r\n    let maxleds = 1\r\n    if (service._controller == CONTROLLERID) {\r\n        switch (service._state) {\r\n            case Ungear: color = Color.Yellow; break;\r\n            case Switch.Straight: color = Color.Green; break;\r\n            case Switch.Left: color = Color.Red; break;\r\n            case Switch.Right: color = Color.Blue; break;\r\n            case Speed.Fast:\r\n            case Speed.Normal:\r\n            case Speed.Slow: color = Color.Green; maxleds = 3; break;\r\n            case Pause.Long:\r\n            case Pause.Normal:\r\n            case Pause.Short: color = Color.Red; maxleds = 3; break;\r\n        }\r\n        switch (service._state) {\r\n            case Speed.Fast:\r\n            case Pause.Long: leds = 3; break;\r\n            case Speed.Normal:\r\n            case Pause.Normal: leds = 2; break;\r\n        }\r\n        switch (service._port) {\r\n            case 0: for (let i = 0; i < leds; i++)\r\n                        PORT1.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT1.setPixelColor(service._firstled + i, Color.Black)\r\n                    break;\r\n        }\r\n    }\r\n}","README.md":"","pxt.json":"{\n    \"name\": \"intelino\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"general\": \"github:etmbit/general#4ea1e3f3224a0692900d0a9e2898a515af73c9a0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761429058582,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"///////////////////////\r\n//###################//\r\n//##               ##//\r\n//##  ledstrip.ts  ##//\r\n//##               ##//\r\n//###################//\r\n///////////////////////\r\n\r\nenum NeopixelMode {\r\n    GRB = 1,\r\n    RGBW = 2,\r\n    RGB = 3\r\n}\r\n\r\nnamespace Ledstrip {\r\n\r\n    export class Device {\r\n\r\n        pin: DigitalPin\r\n        max: number\r\n        mode: NeopixelMode\r\n        buffer: Buffer\r\n        size: number\r\n        bright: number = 10\r\n\r\n        constructor(pin: DigitalPin, leds: number, mode: NeopixelMode) {\r\n            this.pin = pin\r\n            this.max = leds - 1\r\n            this.mode = mode\r\n            this.size = leds * (mode == NeopixelMode.RGBW ? 4 : 3)\r\n            this.buffer = pins.createBuffer(this.size)\r\n        }\r\n\r\n        show() {\r\n            light.sendWS2812Buffer(this.buffer, this.pin)\r\n        }\r\n\r\n        setPixelRGB(offset: number, red: number, green: number, blue: number, white: number = 0): void {\r\n            offset *= (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            switch (this.mode) {\r\n                case NeopixelMode.GRB:\r\n                    this.buffer[offset + 0] = Math.floor(green * this.bright / 100)\r\n                    this.buffer[offset + 1] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGB:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGBW:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    this.buffer[offset + 3] = Math.floor(white * this.bright / 100);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        setPixelColor(pixel: number, color: Color, white: number = 0): void {\r\n            if (pixel < 0 || pixel >= 8)\r\n                return;\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setPixelRGB(pixel, red, green, blue, white)\r\n        }\r\n\r\n        setRGB(red: number, green: number, blue: number, white: number = 0) {\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setColor(color: Color, white: number = 0) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setClear(): void {\r\n            this.buffer.fill(0, 0, this.size);\r\n        }\r\n\r\n        setBrightness(brightness: number) {\r\n            if (brightness < 0) brightness = 0\r\n            if (brightness > 100) brightness = 100\r\n            // small steps at low brightness and big steps at high brightness\r\n            brightness = (brightness ^ 2 / 100)\r\n            this.bright = brightness\r\n        }\r\n\r\n        setRotate(rotation: Rotate): void {\r\n            let offset = (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            if (rotation == Rotate.Clockwise)\r\n                this.buffer.rotate(-offset, 0, this.size)\r\n            else\r\n                this.buffer.rotate(offset, 0, this.size)\r\n        }\r\n\r\n        rainbow(rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            if (rotation == Rotate.Clockwise) {\r\n                this.setPixelColor(0, Color.Red)\r\n                this.setPixelColor(1, Color.Orange)\r\n                this.setPixelColor(2, Color.Yellow)\r\n                this.setPixelColor(3, Color.Green)\r\n                this.setPixelColor(4, Color.Blue)\r\n                this.setPixelColor(5, Color.Indigo)\r\n                this.setPixelColor(6, Color.Violet)\r\n                this.setPixelColor(7, Color.Purple)\r\n            }\r\n            else {\r\n                this.setPixelColor(7, Color.Red)\r\n                this.setPixelColor(6, Color.Orange)\r\n                this.setPixelColor(5, Color.Yellow)\r\n                this.setPixelColor(4, Color.Green)\r\n                this.setPixelColor(3, Color.Blue)\r\n                this.setPixelColor(2, Color.Indigo)\r\n                this.setPixelColor(1, Color.Violet)\r\n                this.setPixelColor(0, Color.Purple)\r\n            }\r\n            this.show()\r\n            basic.pause(pace)\r\n            pace = (pace + 1) * 75\r\n            for (let i = 0; i < this.max; i++) {\r\n                this.setRotate(rotation)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n        }\r\n\r\n        snake(color: Color, rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setClear();\r\n            this.show()\r\n            pace = (pace + 1) * 75\r\n            for (let i = this.max; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, red, green, blue)\r\n                else\r\n                    this.setPixelRGB(i, red, green, blue)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            this.show()\r\n            for (let i = this.max - 1; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, 0, 0, 0)\r\n                else\r\n                    this.setPixelRGB(i, 0, 0, 0)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            if (rotation == Rotate.Clockwise)\r\n                this.setPixelRGB(0, 0, 0, 0)\r\n            else\r\n                this.setPixelRGB(this.max, 0, 0, 0)\r\n            this.show()\r\n            basic.pause(pace)\r\n        }\r\n    }\r\n\r\n    export function create(pin: DigitalPin, leds: number, mode: NeopixelMode = NeopixelMode.GRB): Device {\r\n        let device = new Device(pin, leds, mode)\r\n        return device\r\n    }\r\n}\r\n\r\n\r\n/////////////////////\r\n//#################//\r\n//##             ##//\r\n//## intelino.ts ##//\r\n//##             ##//\r\n//#################//\r\n/////////////////////\r\n\r\nconst Ungear = 0\r\n\r\nenum Switch {\r\n    Straight = 1,\r\n    Left = 2,\r\n    Right = 3,\r\n}\r\nenum Speed {\r\n    Fast = 4,\r\n    Normal = 5,\r\n    Slow = 6,\r\n}\r\n\r\nenum Pause {\r\n    Long = 7,\r\n    Normal = 8,\r\n    Short = 9,\r\n}\r\n\r\nlet PORT1: Ledstrip.Device\r\nlet PORT2: Ledstrip.Device\r\nlet PORT3: Ledstrip.Device\r\nlet PORT4: Ledstrip.Device\r\n\r\nlet CONTROLLERID: number = 0\r\n\r\ninterface Service {\r\n    _id: number\r\n    _controller: number\r\n    _port: number\r\n    _firstled: number\r\n    _state: number\r\n}\r\n\r\nconst dummy: Service = {_id: 0, _controller: 0, _port: 0, _firstled: 0, _state: 0}\r\n\r\nlet CONTROLLER: Service[] = []\r\n\r\nfunction msgBase(id: number): number {\r\n    let base: number\r\n    for (let i = 0; i < CONTROLLER.length; i++)\r\n        if (CONTROLLER[i]._id == id) {\r\n            base = CONTROLLER[i]._controller * 1000 +\r\n                (CONTROLLER[i]._port * 25 + CONTROLLER[i]._firstled) * 10\r\n            return base\r\n        }\r\n    return 0\r\n}\r\n\r\nfunction msgService(msg: number): Service {\r\n    let service: Service = dummy\r\n    service._id = 0\r\n    service._controller = Math.floor(msg / 1000)\r\n    msg = msg - service._controller * 1000\r\n    service._port = Math.floor(msg / 250)\r\n    msg = msg - service._port * 250\r\n    service._firstled = Math.floor(msg / 10)\r\n    service._state = msg - service._firstled * 10\r\n    return service\r\n}\r\n\r\n//% color=\"#FFC90E\" icon=\"\\uf207\"\r\n//% block=\"Intelino\"\r\n//% block.loc.nl=\"Intelino\"\r\nnamespace Intelino {\r\n\r\n    export function setController(controller: number) {\r\n        CONTROLLERID = controller\r\n        PORT1 = Ledstrip.create(DigitalPin.P20, 25)\r\n        PORT2 = Ledstrip.create(DigitalPin.P0, 25)\r\n        PORT3 = Ledstrip.create(DigitalPin.P1, 25)\r\n        PORT4 = Ledstrip.create(DigitalPin.P2, 25)\r\n        PORT1.setClear(); PORT1.show()\r\n        PORT2.setClear(); PORT1.show()\r\n        PORT3.setClear(); PORT1.show()\r\n        PORT4.setClear(); PORT1.show()\r\n    }\r\n\r\n    export function addController(id: number, controller: number, port: number, firstled: number) {\r\n        CONTROLLER.push( {_id: id, _controller: controller,\r\n                            _port: port, _firstled: firstled, _state: -1})\r\n    }\r\n\r\n    export function ungear(id: number) {\r\n        radio.sendNumber(msgBase(id))\r\n    }\r\n\r\n    export function trackSwitch(id: number, direction: Switch) {\r\n        radio.sendNumber(msgBase(id) + direction)\r\n    }\r\n\r\n    export function trackSpeed(id: number, speed: Speed) {\r\n        radio.sendNumber(msgBase(id) + speed)\r\n    }\r\n\r\n    export function trackPause(id: number, time: Pause) {\r\n        radio.sendNumber(msgBase(id) + time)\r\n    }\r\n}\r\n\r\nmessageHandler = (msg: number) => {\r\n    if (!CONTROLLERID) return\r\n    let service = msgService(msg)\r\n    let color: Color\r\n    let leds = 1\r\n    let maxleds = 1\r\n    if (service._controller == CONTROLLERID) {\r\n        switch (service._state) {\r\n            case Ungear: color = Color.Yellow; break;\r\n            case Switch.Straight: color = Color.Green; break;\r\n            case Switch.Left: color = Color.Red; break;\r\n            case Switch.Right: color = Color.Blue; break;\r\n            case Speed.Fast:\r\n            case Speed.Normal:\r\n            case Speed.Slow: color = Color.Green; maxleds = 3; break;\r\n            case Pause.Long:\r\n            case Pause.Normal:\r\n            case Pause.Short: color = Color.Red; maxleds = 3; break;\r\n        }\r\n        switch (service._state) {\r\n            case Speed.Fast:\r\n            case Pause.Long: leds = 3; break;\r\n            case Speed.Normal:\r\n            case Pause.Normal: leds = 2; break;\r\n        }\r\n        switch (service._port) {\r\n            case 1:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT1.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT1.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT1.show()\r\n                    break;\r\n            case 2: \r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT2.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT2.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT2.show()\r\n                    break;\r\n            case 3:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT3.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT3.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT3.show()\r\n                    break;\r\n            case 4:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT4.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT4.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT4.show()\r\n                    break;\r\n        }\r\n    }\r\n}\r\n\r\n/////////////////////////////////////\r\n/////////////////////////////////////\r\n\r\nIntelino.setController(1)\r\nIntelino.addController(1, 1, 2, 0)\r\nIntelino.addController(2, 1, 3, 0)\r\n\r\nrunHandler = () => {\r\n    messageHandler(msgBase(1) + Switch.Straight)\r\n}\r\n\r\nstopHandler = () => {\r\n    messageHandler(msgBase(1) + Switch.Right)\r\n}\r\n","README.md":"","pxt.json":"{\n    \"name\": \"intelino\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"general\": \"github:etmbit/general#4ea1e3f3224a0692900d0a9e2898a515af73c9a0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761430860772,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"///////////////////////\r\n//###################//\r\n//##               ##//\r\n//##  ledstrip.ts  ##//\r\n//##               ##//\r\n//###################//\r\n///////////////////////\r\n\r\nenum NeopixelMode {\r\n    GRB = 1,\r\n    RGBW = 2,\r\n    RGB = 3\r\n}\r\n\r\nnamespace Ledstrip {\r\n\r\n    export class Device {\r\n\r\n        pin: DigitalPin\r\n        max: number\r\n        mode: NeopixelMode\r\n        buffer: Buffer\r\n        size: number\r\n        bright: number = 10\r\n\r\n        constructor(pin: DigitalPin, leds: number, mode: NeopixelMode) {\r\n            this.pin = pin\r\n            this.max = leds - 1\r\n            this.mode = mode\r\n            this.size = leds * (mode == NeopixelMode.RGBW ? 4 : 3)\r\n            this.buffer = pins.createBuffer(this.size)\r\n        }\r\n\r\n        show() {\r\n            light.sendWS2812Buffer(this.buffer, this.pin)\r\n        }\r\n\r\n        setPixelRGB(offset: number, red: number, green: number, blue: number, white: number = 0): void {\r\n            offset *= (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            switch (this.mode) {\r\n                case NeopixelMode.GRB:\r\n                    this.buffer[offset + 0] = Math.floor(green * this.bright / 100)\r\n                    this.buffer[offset + 1] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGB:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGBW:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    this.buffer[offset + 3] = Math.floor(white * this.bright / 100);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        setPixelColor(pixel: number, color: Color, white: number = 0): void {\r\n            if (pixel < 0 || pixel >= this.max)\r\n                return;\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setPixelRGB(pixel, red, green, blue, white)\r\n        }\r\n\r\n        setRGB(red: number, green: number, blue: number, white: number = 0) {\r\n            for (let i = 0; i < this.max; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setColor(color: Color, white: number = 0) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setClear(): void {\r\n            this.buffer.fill(0, 0, this.size);\r\n        }\r\n\r\n        setBrightness(brightness: number) {\r\n            if (brightness < 0) brightness = 0\r\n            if (brightness > 100) brightness = 100\r\n            // small steps at low brightness and big steps at high brightness\r\n            brightness = (brightness ^ 2 / 100)\r\n            this.bright = brightness\r\n        }\r\n\r\n        setRotate(rotation: Rotate): void {\r\n            let offset = (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            if (rotation == Rotate.Clockwise)\r\n                this.buffer.rotate(-offset, 0, this.size)\r\n            else\r\n                this.buffer.rotate(offset, 0, this.size)\r\n        }\r\n\r\n        rainbow(rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            if (rotation == Rotate.Clockwise) {\r\n                this.setPixelColor(0, Color.Red)\r\n                this.setPixelColor(1, Color.Orange)\r\n                this.setPixelColor(2, Color.Yellow)\r\n                this.setPixelColor(3, Color.Green)\r\n                this.setPixelColor(4, Color.Blue)\r\n                this.setPixelColor(5, Color.Indigo)\r\n                this.setPixelColor(6, Color.Violet)\r\n                this.setPixelColor(7, Color.Purple)\r\n            }\r\n            else {\r\n                this.setPixelColor(7, Color.Red)\r\n                this.setPixelColor(6, Color.Orange)\r\n                this.setPixelColor(5, Color.Yellow)\r\n                this.setPixelColor(4, Color.Green)\r\n                this.setPixelColor(3, Color.Blue)\r\n                this.setPixelColor(2, Color.Indigo)\r\n                this.setPixelColor(1, Color.Violet)\r\n                this.setPixelColor(0, Color.Purple)\r\n            }\r\n            this.show()\r\n            basic.pause(pace)\r\n            pace = (pace + 1) * 75\r\n            for (let i = 0; i < this.max; i++) {\r\n                this.setRotate(rotation)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n        }\r\n\r\n        snake(color: Color, rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setClear();\r\n            this.show()\r\n            pace = (pace + 1) * 75\r\n            for (let i = this.max; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, red, green, blue)\r\n                else\r\n                    this.setPixelRGB(i, red, green, blue)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            this.show()\r\n            for (let i = this.max - 1; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, 0, 0, 0)\r\n                else\r\n                    this.setPixelRGB(i, 0, 0, 0)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            if (rotation == Rotate.Clockwise)\r\n                this.setPixelRGB(0, 0, 0, 0)\r\n            else\r\n                this.setPixelRGB(this.max, 0, 0, 0)\r\n            this.show()\r\n            basic.pause(pace)\r\n        }\r\n    }\r\n\r\n    export function create(pin: DigitalPin, leds: number, mode: NeopixelMode = NeopixelMode.GRB): Device {\r\n        let device = new Device(pin, leds, mode)\r\n        return device\r\n    }\r\n}\r\n\r\n\r\n/////////////////////\r\n//#################//\r\n//##             ##//\r\n//## intelino.ts ##//\r\n//##             ##//\r\n//#################//\r\n/////////////////////\r\n\r\n// IMPORTANT NOTE:\r\n// A CONTROLLER MUST AND MAY ONLY CALL setController(id)\r\n\r\nconst Uncouple = 0\r\n\r\nenum Switch {\r\n    Straight = 1,\r\n    Left = 2,\r\n    Right = 3,\r\n}\r\nenum Speed {\r\n    Fast = 4,\r\n    Normal = 5,\r\n    Slow = 6,\r\n}\r\n\r\nenum Pause {\r\n    Long = 7,\r\n    Normal = 8,\r\n    Short = 9,\r\n}\r\n\r\nlet PORT1: Ledstrip.Device\r\nlet PORT2: Ledstrip.Device\r\nlet PORT3: Ledstrip.Device\r\nlet PORT4: Ledstrip.Device\r\n\r\nlet CONTROLLERID: number = 0\r\n\r\ninterface Service {\r\n    _id: number\r\n    _controller: number\r\n    _port: number\r\n    _firstled: number\r\n    _state: number\r\n}\r\n\r\nconst dummy: Service = {_id: 0, _controller: 0, _port: 0, _firstled: 0, _state: 0}\r\n\r\nlet CONTROLLER: Service[] = []\r\n\r\nfunction msgBase(id: number): number {\r\n    let base: number\r\n    for (let i = 0; i < CONTROLLER.length; i++)\r\n        if (CONTROLLER[i]._id == id) {\r\n            base = CONTROLLER[i]._controller * 1000 +\r\n                (CONTROLLER[i]._port * 25 + CONTROLLER[i]._firstled) * 10\r\n            return base\r\n        }\r\n    return 0\r\n}\r\n\r\nfunction msgService(msg: number): Service {\r\n    let service: Service = dummy\r\n    service._id = 0\r\n    service._controller = Math.floor(msg / 1000)\r\n    msg = msg - service._controller * 1000\r\n    service._port = Math.floor(msg / 250)\r\n    msg = msg - service._port * 250\r\n    service._firstled = Math.floor(msg / 10)\r\n    service._state = msg - service._firstled * 10\r\n    return service\r\n}\r\n\r\n//% color=\"#FFC90E\" icon=\"\\uf207\"\r\n//% block=\"Intelino\"\r\n//% block.loc.nl=\"Intelino\"\r\nnamespace Intelino {\r\n\r\n    //% block=\"attach device number %id to: controller %controller, port %port, led position %firstled\"\r\n    //% block.loc.nl=\"wijs onderdeel %id toe aan: controller %controller, poort %port, led positie %firstled\"\r\n    //% port.min=1 port.max=4 firstled.min=1 firstled.max=25\r\n    export function addController(id: number, controller: number, port: number, firstled: number) {\r\n        CONTROLLER.push( {_id: id, _controller: controller,\r\n                            _port: port - 1, _firstled: firstled - 1, _state: -1})\r\n    }\r\n\r\n    //% block=\"uncouple the train car\"\r\n    //% nb\r\n    export function ungear(id: number) {\r\n        radio.sendNumber(msgBase(id))\r\n    }\r\n\r\n    export function trackSwitch(id: number, direction: Switch) {\r\n        radio.sendNumber(msgBase(id) + direction)\r\n    }\r\n\r\n    export function trackSpeed(id: number, speed: Speed) {\r\n        radio.sendNumber(msgBase(id) + speed)\r\n    }\r\n\r\n    export function trackPause(id: number, time: Pause) {\r\n        radio.sendNumber(msgBase(id) + time)\r\n    }\r\n}\r\n\r\n// CONTROLLER CODE\r\n// A CONTROLLER MUST AND MAY ONLY CALL setController\r\n\r\nfunction setController(controller: number) {\r\n    CONTROLLERID = controller\r\n    PORT1 = Ledstrip.create(DigitalPin.P20, 25)\r\n    PORT2 = Ledstrip.create(DigitalPin.P0, 25)\r\n    PORT3 = Ledstrip.create(DigitalPin.P1, 25)\r\n    PORT4 = Ledstrip.create(DigitalPin.P2, 25)\r\n    PORT1.setClear(); PORT1.show()\r\n    PORT2.setClear(); PORT1.show()\r\n    PORT3.setClear(); PORT1.show()\r\n    PORT4.setClear(); PORT1.show()\r\n}\r\n\r\nmessageHandler = (msg: number) => {\r\n    if (!CONTROLLERID) return\r\n    let service = msgService(msg)\r\n    let color: Color\r\n    let leds = 1\r\n    let maxleds = 1\r\n    if (service._controller == CONTROLLERID) {\r\n        switch (service._state) {\r\n            case Uncouple: color = Color.Yellow; break;\r\n            case Switch.Straight: color = Color.Green; break;\r\n            case Switch.Left: color = Color.Red; break;\r\n            case Switch.Right: color = Color.Blue; break;\r\n            case Speed.Fast:\r\n            case Speed.Normal:\r\n            case Speed.Slow: color = Color.Green; maxleds = 3; break;\r\n            case Pause.Long:\r\n            case Pause.Normal:\r\n            case Pause.Short: color = Color.Red; maxleds = 3; break;\r\n        }\r\n        switch (service._state) {\r\n            case Speed.Fast:\r\n            case Pause.Long: leds = 3; break;\r\n            case Speed.Normal:\r\n            case Pause.Normal: leds = 2; break;\r\n        }\r\n        switch (service._port) {\r\n            case 0:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT1.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT1.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT1.show()\r\n                    break;\r\n            case 1: \r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT2.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT2.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT2.show()\r\n                    break;\r\n            case 2:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT3.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT3.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT3.show()\r\n                    break;\r\n            case 3:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT4.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT4.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT4.show()\r\n                    break;\r\n        }\r\n    }\r\n}\r\n","README.md":"","pxt.json":"{\n    \"name\": \"intelino\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"general\": \"github:etmbit/general#4ea1e3f3224a0692900d0a9e2898a515af73c9a0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761470308884,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"///////////////////////\r\n//###################//\r\n//##               ##//\r\n//##  ledstrip.ts  ##//\r\n//##               ##//\r\n//###################//\r\n///////////////////////\r\n\r\nenum NeopixelMode {\r\n    GRB = 1,\r\n    RGBW = 2,\r\n    RGB = 3\r\n}\r\n\r\nnamespace Ledstrip {\r\n\r\n    export class Device {\r\n\r\n        pin: DigitalPin\r\n        max: number\r\n        mode: NeopixelMode\r\n        buffer: Buffer\r\n        size: number\r\n        bright: number = 10\r\n\r\n        constructor(pin: DigitalPin, leds: number, mode: NeopixelMode) {\r\n            this.pin = pin\r\n            this.max = leds - 1\r\n            this.mode = mode\r\n            this.size = leds * (mode == NeopixelMode.RGBW ? 4 : 3)\r\n            this.buffer = pins.createBuffer(this.size)\r\n        }\r\n\r\n        show() {\r\n            light.sendWS2812Buffer(this.buffer, this.pin)\r\n        }\r\n\r\n        setPixelRGB(offset: number, red: number, green: number, blue: number, white: number = 0): void {\r\n            offset *= (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            switch (this.mode) {\r\n                case NeopixelMode.GRB:\r\n                    this.buffer[offset + 0] = Math.floor(green * this.bright / 100)\r\n                    this.buffer[offset + 1] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGB:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGBW:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    this.buffer[offset + 3] = Math.floor(white * this.bright / 100);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        setPixelColor(pixel: number, color: Color, white: number = 0): void {\r\n            if (pixel < 0 || pixel >= this.max)\r\n                return;\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setPixelRGB(pixel, red, green, blue, white)\r\n        }\r\n\r\n        setRGB(red: number, green: number, blue: number, white: number = 0) {\r\n            for (let i = 0; i < this.max; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setColor(color: Color, white: number = 0) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setClear(): void {\r\n            this.buffer.fill(0, 0, this.size);\r\n        }\r\n\r\n        setBrightness(brightness: number) {\r\n            if (brightness < 0) brightness = 0\r\n            if (brightness > 100) brightness = 100\r\n            // small steps at low brightness and big steps at high brightness\r\n            brightness = (brightness ^ 2 / 100)\r\n            this.bright = brightness\r\n        }\r\n\r\n        setRotate(rotation: Rotate): void {\r\n            let offset = (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            if (rotation == Rotate.Clockwise)\r\n                this.buffer.rotate(-offset, 0, this.size)\r\n            else\r\n                this.buffer.rotate(offset, 0, this.size)\r\n        }\r\n\r\n        rainbow(rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            if (rotation == Rotate.Clockwise) {\r\n                this.setPixelColor(0, Color.Red)\r\n                this.setPixelColor(1, Color.Orange)\r\n                this.setPixelColor(2, Color.Yellow)\r\n                this.setPixelColor(3, Color.Green)\r\n                this.setPixelColor(4, Color.Blue)\r\n                this.setPixelColor(5, Color.Indigo)\r\n                this.setPixelColor(6, Color.Violet)\r\n                this.setPixelColor(7, Color.Purple)\r\n            }\r\n            else {\r\n                this.setPixelColor(7, Color.Red)\r\n                this.setPixelColor(6, Color.Orange)\r\n                this.setPixelColor(5, Color.Yellow)\r\n                this.setPixelColor(4, Color.Green)\r\n                this.setPixelColor(3, Color.Blue)\r\n                this.setPixelColor(2, Color.Indigo)\r\n                this.setPixelColor(1, Color.Violet)\r\n                this.setPixelColor(0, Color.Purple)\r\n            }\r\n            this.show()\r\n            basic.pause(pace)\r\n            pace = (pace + 1) * 75\r\n            for (let i = 0; i < this.max; i++) {\r\n                this.setRotate(rotation)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n        }\r\n\r\n        snake(color: Color, rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setClear();\r\n            this.show()\r\n            pace = (pace + 1) * 75\r\n            for (let i = this.max; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, red, green, blue)\r\n                else\r\n                    this.setPixelRGB(i, red, green, blue)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            this.show()\r\n            for (let i = this.max - 1; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, 0, 0, 0)\r\n                else\r\n                    this.setPixelRGB(i, 0, 0, 0)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            if (rotation == Rotate.Clockwise)\r\n                this.setPixelRGB(0, 0, 0, 0)\r\n            else\r\n                this.setPixelRGB(this.max, 0, 0, 0)\r\n            this.show()\r\n            basic.pause(pace)\r\n        }\r\n    }\r\n\r\n    export function create(pin: DigitalPin, leds: number, mode: NeopixelMode = NeopixelMode.GRB): Device {\r\n        let device = new Device(pin, leds, mode)\r\n        return device\r\n    }\r\n}\r\n\r\n\r\n/////////////////////\r\n//#################//\r\n//##             ##//\r\n//## intelino.ts ##//\r\n//##             ##//\r\n//#################//\r\n/////////////////////\r\n\r\n// IMPORTANT NOTE:\r\n// A CONTROLLER MUST AND MAY ONLY CALL setController(id)\r\n\r\nconst Uncouple = 0\r\n\r\nenum Switch {\r\n    Straight = 1,\r\n    Left = 2,\r\n    Right = 3,\r\n}\r\nenum Speed {\r\n    Fast = 4,\r\n    Normal = 5,\r\n    Slow = 6,\r\n}\r\n\r\nenum Pause {\r\n    Long = 7,\r\n    Normal = 8,\r\n    Short = 9,\r\n}\r\n\r\nlet PORT1: Ledstrip.Device\r\nlet PORT2: Ledstrip.Device\r\nlet PORT3: Ledstrip.Device\r\nlet PORT4: Ledstrip.Device\r\n\r\nlet CONTROLLERID: number = 0\r\n\r\ninterface Service {\r\n    _id: number\r\n    _controller: number\r\n    _port: number\r\n    _firstled: number\r\n    _state: number\r\n}\r\n\r\nconst dummy: Service = {_id: 0, _controller: 0, _port: 0, _firstled: 0, _state: 0}\r\n\r\nlet CONTROLLER: Service[] = []\r\n\r\nfunction msgBase(id: number): number {\r\n    let base: number\r\n    for (let i = 0; i < CONTROLLER.length; i++)\r\n        if (CONTROLLER[i]._id == id) {\r\n            base = CONTROLLER[i]._controller * 1000 +\r\n                (CONTROLLER[i]._port * 25 + CONTROLLER[i]._firstled) * 10\r\n            return base\r\n        }\r\n    return 0\r\n}\r\n\r\nfunction msgService(msg: number): Service {\r\n    let service: Service = dummy\r\n    service._id = 0\r\n    service._controller = Math.floor(msg / 1000)\r\n    msg = msg - service._controller * 1000\r\n    service._port = Math.floor(msg / 250)\r\n    msg = msg - service._port * 250\r\n    service._firstled = Math.floor(msg / 10)\r\n    service._state = msg - service._firstled * 10\r\n    return service\r\n}\r\n\r\n//% color=\"#FFC90E\" icon=\"\\uf207\"\r\n//% block=\"Intelino\"\r\n//% block.loc.nl=\"Intelino\"\r\nnamespace Intelino {\r\n\r\n    //% block=\"attach device number %id to: controller %controller, port %port, led position %firstled\"\r\n    //% block.loc.nl=\"wijs onderdeel %id toe aan: controller %controller, poort %port, led positie %firstled\"\r\n    //% port.min=1 port.max=4 firstled.min=1 firstled.max=25\r\n    export function addController(id: number, controller: number, port: number, firstled: number) {\r\n        CONTROLLER.push( {_id: id, _controller: controller,\r\n                            _port: port - 1, _firstled: firstled - 1, _state: -1})\r\n    }\r\n\r\n    //% block=\"uncoupling at number %id is %state \"\r\n    //% block.loc.nl=\"ontkoppeling bij onderdeel %id is %state\"\r\n    export function ungear(id: number, state: State) {\r\n        radio.sendNumber(msgBase(id))\r\n    }\r\n\r\n    export function trackSwitch(id: number, direction: Switch) {\r\n        radio.sendNumber(msgBase(id) + direction)\r\n    }\r\n\r\n    export function trackSpeed(id: number, speed: Speed) {\r\n        radio.sendNumber(msgBase(id) + speed)\r\n    }\r\n\r\n    export function trackPause(id: number, time: Pause) {\r\n        radio.sendNumber(msgBase(id) + time)\r\n    }\r\n}\r\n\r\n// CONTROLLER CODE\r\n// A CONTROLLER MUST AND MAY ONLY CALL setController\r\n\r\nfunction setController(controller: number) {\r\n    CONTROLLERID = controller\r\n    PORT1 = Ledstrip.create(DigitalPin.P20, 25)\r\n    PORT2 = Ledstrip.create(DigitalPin.P0, 25)\r\n    PORT3 = Ledstrip.create(DigitalPin.P1, 25)\r\n    PORT4 = Ledstrip.create(DigitalPin.P2, 25)\r\n    PORT1.setClear(); PORT1.show()\r\n    PORT2.setClear(); PORT1.show()\r\n    PORT3.setClear(); PORT1.show()\r\n    PORT4.setClear(); PORT1.show()\r\n}\r\n\r\nmessageHandler = (msg: number) => {\r\n    if (!CONTROLLERID) return\r\n    let service = msgService(msg)\r\n    let color: Color\r\n    let leds = 1\r\n    let maxleds = 1\r\n    if (service._controller == CONTROLLERID) {\r\n        switch (service._state) {\r\n            case Uncouple: color = Color.Yellow; break;\r\n            case Switch.Straight: color = Color.Green; break;\r\n            case Switch.Left: color = Color.Red; break;\r\n            case Switch.Right: color = Color.Blue; break;\r\n            case Speed.Fast:\r\n            case Speed.Normal:\r\n            case Speed.Slow: color = Color.Green; maxleds = 3; break;\r\n            case Pause.Long:\r\n            case Pause.Normal:\r\n            case Pause.Short: color = Color.Red; maxleds = 3; break;\r\n        }\r\n        switch (service._state) {\r\n            case Speed.Fast:\r\n            case Pause.Long: leds = 3; break;\r\n            case Speed.Normal:\r\n            case Pause.Normal: leds = 2; break;\r\n        }\r\n        switch (service._port) {\r\n            case 0:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT1.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT1.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT1.show()\r\n                    break;\r\n            case 1: \r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT2.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT2.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT2.show()\r\n                    break;\r\n            case 2:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT3.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT3.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT3.show()\r\n                    break;\r\n            case 3:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT4.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT4.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT4.show()\r\n                    break;\r\n        }\r\n    }\r\n}\r\n","README.md":"","pxt.json":"{\n    \"name\": \"intelino\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"general\": \"github:etmbit/general#4ea1e3f3224a0692900d0a9e2898a515af73c9a0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1761472111037,"editorVersion":"8.0.17","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"///////////////////////\r\n//###################//\r\n//##               ##//\r\n//##  ledstrip.ts  ##//\r\n//##               ##//\r\n//###################//\r\n///////////////////////\r\n\r\nenum NeopixelMode {\r\n    GRB = 1,\r\n    RGBW = 2,\r\n    RGB = 3\r\n}\r\n\r\nnamespace Ledstrip {\r\n\r\n    export class Device {\r\n\r\n        pin: DigitalPin\r\n        max: number\r\n        mode: NeopixelMode\r\n        buffer: Buffer\r\n        size: number\r\n        bright: number = 10\r\n\r\n        constructor(pin: DigitalPin, leds: number, mode: NeopixelMode) {\r\n            this.pin = pin\r\n            this.max = leds - 1\r\n            this.mode = mode\r\n            this.size = leds * (mode == NeopixelMode.RGBW ? 4 : 3)\r\n            this.buffer = pins.createBuffer(this.size)\r\n        }\r\n\r\n        show() {\r\n            light.sendWS2812Buffer(this.buffer, this.pin)\r\n        }\r\n\r\n        setPixelRGB(offset: number, red: number, green: number, blue: number, white: number = 0): void {\r\n            offset *= (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            switch (this.mode) {\r\n                case NeopixelMode.GRB:\r\n                    this.buffer[offset + 0] = Math.floor(green * this.bright / 100)\r\n                    this.buffer[offset + 1] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGB:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    break;\r\n                case NeopixelMode.RGBW:\r\n                    this.buffer[offset + 0] = Math.floor(red * this.bright / 100);\r\n                    this.buffer[offset + 1] = Math.floor(green * this.bright / 100);\r\n                    this.buffer[offset + 2] = Math.floor(blue * this.bright / 100);\r\n                    this.buffer[offset + 3] = Math.floor(white * this.bright / 100);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        setPixelColor(pixel: number, color: Color, white: number = 0): void {\r\n            if (pixel < 0 || pixel >= this.max)\r\n                return;\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setPixelRGB(pixel, red, green, blue, white)\r\n        }\r\n\r\n        setRGB(red: number, green: number, blue: number, white: number = 0) {\r\n            for (let i = 0; i < this.max; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setColor(color: Color, white: number = 0) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            for (let i = 0; i < 8; ++i)\r\n                this.setPixelRGB(i, red, green, blue, white)\r\n        }\r\n\r\n        setClear(): void {\r\n            this.buffer.fill(0, 0, this.size);\r\n        }\r\n\r\n        setBrightness(brightness: number) {\r\n            if (brightness < 0) brightness = 0\r\n            if (brightness > 100) brightness = 100\r\n            // small steps at low brightness and big steps at high brightness\r\n            brightness = (brightness ^ 2 / 100)\r\n            this.bright = brightness\r\n        }\r\n\r\n        setRotate(rotation: Rotate): void {\r\n            let offset = (this.mode == NeopixelMode.RGBW ? 4 : 3)\r\n            if (rotation == Rotate.Clockwise)\r\n                this.buffer.rotate(-offset, 0, this.size)\r\n            else\r\n                this.buffer.rotate(offset, 0, this.size)\r\n        }\r\n\r\n        rainbow(rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            if (rotation == Rotate.Clockwise) {\r\n                this.setPixelColor(0, Color.Red)\r\n                this.setPixelColor(1, Color.Orange)\r\n                this.setPixelColor(2, Color.Yellow)\r\n                this.setPixelColor(3, Color.Green)\r\n                this.setPixelColor(4, Color.Blue)\r\n                this.setPixelColor(5, Color.Indigo)\r\n                this.setPixelColor(6, Color.Violet)\r\n                this.setPixelColor(7, Color.Purple)\r\n            }\r\n            else {\r\n                this.setPixelColor(7, Color.Red)\r\n                this.setPixelColor(6, Color.Orange)\r\n                this.setPixelColor(5, Color.Yellow)\r\n                this.setPixelColor(4, Color.Green)\r\n                this.setPixelColor(3, Color.Blue)\r\n                this.setPixelColor(2, Color.Indigo)\r\n                this.setPixelColor(1, Color.Violet)\r\n                this.setPixelColor(0, Color.Purple)\r\n            }\r\n            this.show()\r\n            basic.pause(pace)\r\n            pace = (pace + 1) * 75\r\n            for (let i = 0; i < this.max; i++) {\r\n                this.setRotate(rotation)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n        }\r\n\r\n        snake(color: Color, rotation: Rotate, pace: Pace = Pace.Normal) {\r\n            let rgb = fromColor(color)\r\n            let red = (rgb >> 16) & 0xFF;\r\n            let green = (rgb >> 8) & 0xFF;\r\n            let blue = (rgb) & 0xFF;\r\n            this.setClear();\r\n            this.show()\r\n            pace = (pace + 1) * 75\r\n            for (let i = this.max; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, red, green, blue)\r\n                else\r\n                    this.setPixelRGB(i, red, green, blue)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            this.show()\r\n            for (let i = this.max - 1; i >= 0; i--) {\r\n                if (rotation == Rotate.Clockwise)\r\n                    this.setPixelRGB(this.max - i, 0, 0, 0)\r\n                else\r\n                    this.setPixelRGB(i, 0, 0, 0)\r\n                this.show()\r\n                basic.pause(pace)\r\n            }\r\n            if (rotation == Rotate.Clockwise)\r\n                this.setPixelRGB(0, 0, 0, 0)\r\n            else\r\n                this.setPixelRGB(this.max, 0, 0, 0)\r\n            this.show()\r\n            basic.pause(pace)\r\n        }\r\n    }\r\n\r\n    export function create(pin: DigitalPin, leds: number, mode: NeopixelMode = NeopixelMode.GRB): Device {\r\n        let device = new Device(pin, leds, mode)\r\n        return device\r\n    }\r\n}\r\n\r\n\r\n/////////////////////\r\n//#################//\r\n//##             ##//\r\n//## intelino.ts ##//\r\n//##             ##//\r\n//#################//\r\n/////////////////////\r\n\r\n// IMPORTANT NOTE:\r\n// A CONTROLLER MUST AND MAY ONLY CALL setController(id)\r\n\r\nenum Switch {\r\n    Straight = 0,\r\n    Left = 1,\r\n    Right = 2,\r\n}\r\n\r\nenum Uncouple {\r\n    On = 3,\r\n    Off = 4,\r\n}\r\nenum Speed {\r\n    Fast = 5,\r\n    Normal = 6,\r\n    Slow = 7,\r\n}\r\n\r\nenum Pause {\r\n    Long = 8,\r\n    Normal = 9,\r\n    Short = 10,\r\n}\r\n\r\nlet PORT1: Ledstrip.Device\r\nlet PORT2: Ledstrip.Device\r\nlet PORT3: Ledstrip.Device\r\nlet PORT4: Ledstrip.Device\r\n\r\nlet CONTROLLERID: number = 0\r\n\r\ninterface Service {\r\n    _id: number\r\n    _controller: number\r\n    _port: number\r\n    _firstled: number\r\n    _state: number\r\n}\r\n\r\nconst dummy: Service = {_id: 0, _controller: 0, _port: 0, _firstled: 0, _state: 0}\r\n\r\nlet CONTROLLER: Service[] = []\r\n\r\n// states:      15 (3xSwitch, 2xUncouple, 3xSpeed, 3xPause, 4xReserved)\r\n// led bases:   0, 15, ..., 180 (12 leds per port)\r\n// port bases:  0, 200, 400, 600 (4 ports per hub)\r\n// hub bases:   0, 1000, 2000, 3000, ...\r\n\r\nfunction msgBase(id: number): number {\r\n    let base: number\r\n    for (let i = 0; i < CONTROLLER.length; i++)\r\n        if (CONTROLLER[i]._id == id) {\r\n            base = CONTROLLER[i]._controller * 1000 +\r\n                (CONTROLLER[i]._port * 200 + CONTROLLER[i]._firstled) * 15\r\n            return base\r\n        }\r\n    return 0\r\n}\r\n\r\nfunction msgService(msg: number): Service {\r\n    let service: Service = dummy\r\n    service._id = 0\r\n    service._controller = Math.floor(msg / 1000)\r\n    msg = msg - service._controller * 1000\r\n    service._port = Math.floor(msg / 200)\r\n    msg = msg - service._port * 200\r\n    service._firstled = Math.floor(msg / 15)\r\n    service._state = msg - service._firstled * 15\r\n    return service\r\n}\r\n\r\n//% color=\"#FFC90E\" icon=\"\\uf207\"\r\n//% block=\"Intelino\"\r\n//% block.loc.nl=\"Intelino\"\r\nnamespace Intelino {\r\n\r\n    //% block=\"attach device number %id to: controller %controller, port %port, led position %firstled\"\r\n    //% block.loc.nl=\"wijs onderdeel %id toe aan: controller %controller, poort %port, led positie %firstled\"\r\n    //% port.min=1 port.max=4 firstled.min=1 firstled.max=25\r\n    export function addController(id: number, controller: number, port: number, firstled: number) {\r\n        CONTROLLER.push( {_id: id, _controller: controller,\r\n                            _port: port - 1, _firstled: firstled - 1, _state: -1})\r\n    }\r\n\r\n    //% block=\"uncoupling at IC %id is %state \"\r\n    //% block.loc.nl=\"ontkoppeling bij IC %id is %state\"\r\n    export function trainUngear(id: number, state: Uncouple) {\r\n        radio.sendNumber(msgBase(id) + state)\r\n    }\r\n\r\n    //% block=\"speed at IC %id is %speed \"\r\n    //% block.loc.nl=\"snelheid bij IC %id is %speed\"\r\n    export function trainSpeed(id: number, speed: Speed) {\r\n        radio.sendNumber(msgBase(id) + speed)\r\n    }\r\n\r\n    //% block=\"stop at IC %id is %speed \"\r\n    //% block.loc.nl=\"stop bij IC %id is %speed\"\r\n    export function trackPause(id: number, time: Pause) {\r\n        radio.sendNumber(msgBase(id) + time)\r\n    }\r\n\r\n    //% block=\"switch at IC %id is %speed \"\r\n    //% block.loc.nl=\"wissel bij IC %id staat op %speed\"\r\n    export function trackSwitch(id: number, direction: Switch) {\r\n        radio.sendNumber(msgBase(id) + direction)\r\n    }\r\n}\r\n\r\n// CONTROLLER CODE\r\n// A CONTROLLER MUST AND MAY ONLY CALL setController\r\n\r\nfunction setController(controller: number) {\r\n    CONTROLLERID = controller\r\n    PORT1 = Ledstrip.create(DigitalPin.P20, 25)\r\n    PORT2 = Ledstrip.create(DigitalPin.P0, 25)\r\n    PORT3 = Ledstrip.create(DigitalPin.P1, 25)\r\n    PORT4 = Ledstrip.create(DigitalPin.P2, 25)\r\n    PORT1.setClear(); PORT1.show()\r\n    PORT2.setClear(); PORT1.show()\r\n    PORT3.setClear(); PORT1.show()\r\n    PORT4.setClear(); PORT1.show()\r\n}\r\n\r\nmessageHandler = (msg: number) => {\r\n    if (!CONTROLLERID) return\r\n    let service = msgService(msg)\r\n    let color: Color\r\n    let leds = 1\r\n    let maxleds = 1\r\n    if (service._controller == CONTROLLERID) {\r\n        switch (service._state) {\r\n            case Switch.Straight: color = Color.Green; break;\r\n            case Switch.Left: color = Color.Red; break;\r\n            case Switch.Right: color = Color.Blue; break;\r\n            case Uncouple.On: color = Color.Yellow; break;\r\n            case Uncouple.Off: color = Color.Black; break;\r\n            case Speed.Fast:\r\n            case Speed.Normal:\r\n            case Speed.Slow: color = Color.Green; maxleds = 3; break;\r\n            case Pause.Long:\r\n            case Pause.Normal:\r\n            case Pause.Short: color = Color.Red; maxleds = 3; break;\r\n        }\r\n        switch (service._state) {\r\n            case Speed.Fast:\r\n            case Pause.Long: leds = 3; break;\r\n            case Speed.Normal:\r\n            case Pause.Normal: leds = 2; break;\r\n        }\r\n        switch (service._port) {\r\n            case 0:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT1.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT1.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT1.show()\r\n                    break;\r\n            case 1: \r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT2.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT2.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT2.show()\r\n                    break;\r\n            case 2:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT3.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT3.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT3.show()\r\n                    break;\r\n            case 3:\r\n                    for (let i = 0; i < leds; i++)\r\n                        PORT4.setPixelColor(service._firstled + i, color)\r\n                    for (let i = leds; i < maxleds; i++)\r\n                        PORT4.setPixelColor(service._firstled + i, Color.Black)\r\n                    PORT4.show()\r\n                    break;\r\n        }\r\n    }\r\n}\r\n","README.md":"","pxt.json":"{\n    \"name\": \"intelino\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"general\": \"github:etmbit/general#4ea1e3f3224a0692900d0a9e2898a515af73c9a0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1761472806802}